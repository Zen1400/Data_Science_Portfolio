Source : https://www.sql-practice.com/            Difficulty : Hard                                     num : 1

Question :

Each admission costs $50 for patients without insurance, and $10 for patients with insurance. All patients with an even patient_id have insurance.
Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group.

Solution :

WITH cost AS (SELECT CASE
                         WHEN patient_id % 2 = 0 THEN "Yes"
                         ELSE "No"
                         END AS has_insurance,
                     CASE 
                         WHEN patient_id % 2 = 0 THEN 10
                         ELSE 50
                         END AS cost_after_insurance
            FROM admissions)

SELECT has_insurance, SUM(cost_after_insurance)
FROM cost
GROUP BY has_insurance

___________________________________________________________________________________________________________________

Source : https://www.sql-practice.com/            Difficulty : Hard                               num = 2

Question : 

Show all of the patients grouped into weight groups.
Show the total amount of patients in each weight group.
Order the list by the weight group decending.
For example, if they weight 100 to 109 they are placed in the 100 weight group, 110-119 = 110 weight group, etc.

Solution :

SELECT COUNT(patient_id) AS patients_in_group,
CASE WHEN weight between 0 aND 9 THEN 0
	 WHEN weight between 10 aND 19 THEN 10
     WHEN weight between 20 aND 29 THEN 20
     WHEN weight between 30 aND 39 THEN 30
     WHEN weight between 40 aND 49 THEN 40
     WHEN weight between 50 aND 59 THEN 50
     WHEN weight between 60 aND 69 THEN 60
     WHEN weight between 70 aND 79 THEN 70
     WHEN weight between 80 aND 89 THEN 80
     WHEN weight between 90 aND 99 THEN 90
     WHEN weight between 100 aND 109 THEN 100
     WHEN weight between 110 aND 119 THEN 110
     WHEN weight between 120 aND 129 THEN 120
     WHEN weight between 130 aND 139 THEN 130
     END AS weight_group
FROM patients
GROUP BY weight_group
ORDER BY weight_group DESC

________________________________________________________________________________________________________________

Source : https://www.sql-practice.com/            Difficulty : Hard                                num = 3

Question :

Show patient_id, weight, height, isObese from the patients table.
Display isObese as a boolean 0 or 1.
Obese is defined as weight(kg)/(height(m)2) >= 30.
weight is in units kg.
height is in units cm.

Solution :

select patient_id, weight, height, 
CASE
	WHEN weight / (POWER((height / 100.0),2)) >= 30 THEN 1
    ELSE 0
    END AS isObese
FROM patients

________________________________________________________________________________________________________________

Source : https://www.sql-practice.com/            Difficulty : Medium                                num = 4

Question : 

Show unique first names from the patients table which only occurs once in the list.
For example, if two or more people are named 'John' in the first_name column then don't include their name in the output list. If only 1 person is named 'Leo' then include them in the output.

Solution :

WITH c AS(
  SELECT first_name, count(*) as occurence FROM patients
  group by first_name)       
  select first_name from c 
  WHERE occurence == 1

_______________________________________________________________________________________________________________

Source : https://www.sql-practice.com/            Difficulty : Hard                                num = 5

Question : 

All patients who have gone through admissions, can see their medical documents on our site. Those patients are given a temporary password after their first admission. Show the patient_id and temp_password.
The password must be the following, in order:
1. patient_id
2. the numerical length of patient's last_name
3. year of patient's birth_date

Solution : 

SELECT DISTINCT a.patient_id, concat(a.patient_id, LEN(p.last_name), YEAR(p.birth_date))
AS temp_password FROM admissions a
JOIN patients p  ON a.patient_id = p.patient_id

_________________________________________________________________________________________________________________________

Source : https://www.sql-practice.com/            Difficulty : Medium                                num = 6

Question : 

Show patient_id, first_name, last_name from patients whos primary_diagnosis is 'Dementia'.
Primary diagnosis is stored in the admissions table.

Solution : 

select patients.patient_id, first_name, last_name from patients
INNER join admissions ON patients.patient_id = admissions.patient_id
WHERE primary_diagnosis == "Dementia"

_________________________________________________________________________________________________________________________

Source : https://www.sql-practice.com/            Difficulty : Medium                                num = 7

Question : 

Show patient_id and first_name from patients where their first_name start and ends with 's' and is at least 6 characters long.

Solution : 

SELECT patient_id, first_name FROM patients
WHERE first_name LIKE "s%s"
AND LEN(first_name) >= 6

_________________________________________________________________________________________________________________________

Source : https://www.sql-practice.com/            Difficulty : Hard                                num = 8

Question : 

Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name

Solution : 

WITH sex AS (SELECT SUM(CASE
             			WHEN gender = "M" THEN 1
             			ELSE 0
                     END) AS m,
                    SUM(CASE
             			WHEN gender = "F" THEN 1
             			ELSE 0
             		END) AS f,
                    province_id
FROM patients
GROUP BY province_id)

SELECT province_name FROM province_names
JOIN sex ON province_names.province_id = sex.province_id
WHERE m > f

_________________________________________________________________________________________________________________________

Source : https://www.leetcode.com/            Difficulty : Medium                                num = 9

Question : 

Write an SQL query to find employees who have the highest salary in each of the departments.

Return the result table in any order.

Solution :

SELECT department.name AS DEPARTMENT, employee.name AS Employee, SALARY
FROM employee
JOIN department ON employee.departmentid = department.id
WHERE (department.id, Salary) IN (SELECT departmentid, MAX(salary) FROM employee
                                 GROUP BY departmentid)
                                 
_________________________________________________________________________________________________________________________

Source : https://www.leetcode.com/            Difficulty : Medium                                num = 10

Question : 

Write an SQL query to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.
Return the result table ordered by id in ascending order.

Solution : 

SELECT CASE 
            WHEN id % 2 = 0 AND id < (SELECT COUNT(*) FROM seat) THEN id - 1
            WHEN id % 2 != 0 AND id < (SELECT COUNT(*) FROM seat) THEN id + 1
            WHEN id % 2 = 0 AND id = (SELECT COUNT(*) FROM seat) THEN id - 1
            ELSE id
            END AS id,
        student FROM seat
        ORDER BY id
        
____________________________________________________________________________________________________________________________

Source : Source : https://www.sql-practice.com/            Difficulty : Hard                                num = 11


Question :

For each day display the total amount of admissions on that day. Display the amount changed from the previous date.


Solution : 

WITH c AS (SELECT admission_date, COUNT(*) aS admission_day
           FROM admissions
           GROUP BY admission_date),
           
p AS (SELECT admission_date, admission_day,
           LAG(admission_day, 1, NULL) OVER(order by admission_date) AS pre
           FROM c)

SELECT admission_date, admission_day,
(admission_day - pre) AS admission_count_change
FROM p

_____________________________________________________________________________________________________________________________

Source : https://www.leetcode.com/            Difficulty : Medium                                num = 12


Question : 

(stock_name, operation_day) is the primary key for this table.
The operation column is an ENUM of type ('Sell', 'Buy')
Each row of this table indicates that the stock which has stock_name had an operation on the day operation_day with the price.
It is guaranteed that each 'Sell' operation for a stock has a corresponding 'Buy' operation in a previous day. It is also guaranteed that each 'Buy' operation for a stock has a corresponding 'Sell' operation in an upcoming day.


Solution : 

WITH buy AS 
(SELECT stock_name, SUM(price) AS bought
            FROM stocks
 WHERE operation = "Buy"
GROUP BY stock_name
),
sell AS (SELECT stock_name, SUM(price) AS sold
        FROM stocks
        WHERE operation = "Sell"
        GROUP BY stock_name)
SELECT buy.stock_name, sell.sold - buy.bought AS capital_gain_loss
FROM buy
JOIN sell ON buy.stock_name = sell.stock_name

_______________________________________________________________________________________________________________________

Source : https://www.leetcode.com/            Difficulty : Hard                                num = 13


Question : 

The cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.

Write a SQL query to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between "2013-10-01" and "2013-10-03". Round Cancellation Rate to two decimal points.
Return the result table in any order.


Solution :

WITH t AS (SELECT trips.id, trips.client_id, trips.driver_id, trips.status, Trips.request_at, l_1.banned AS b_1, l_2.banned AS b_2, 

SUM(CASE 
    WHEN l_1.banned = "No" AND l_2.banned = "No" AND Trips.status LIKE "cance%" THEN 1
    ELSE 0
    END ) AS cancel,
SUM(CASE 
    WHEN l_1.banned = "No" AND l_2.banned = "No" THEN 1
    ELSE 0
    END ) AS trip

FROM Trips
LEFT JOIN Users AS l_1 ON trips.driver_id = L_1.users_id
LEFT JOIN Users AS l_2 ON trips.client_id = l_2.users_id
WHERE trips.request_at BETWEEN "2013-10-01" AND "2013-10-03"
GROUP BY trips.request_at)

SELECT request_at AS Day, ROUND(cancel/trip, 2) AS "Cancellation Rate"
FROM t


_________________________________________________________________________________________________________________________________

Source : https://www.sqlpad.io/            Difficulty : Hard                                num = 14


Question : 

Write a query to return the number of good days and bad days in May 2020 based on number of daily rentals.
Return the results in one row with 2 columns from left to right: good_days, bad_days.
good day: > 100 rentals.
bad day: <= 100 rentals.
Hint (For users already know OUTER JOIN), you can use dates table
Hint: be super careful about datetime columns.
Hint: this problem could be tricky, feel free to explore the rental table and take a look at some data.


Answer : 

WITH rent_day AS 
(SELECT COUNT(*) AS rent, DATE(rental_ts) AS day 
 FROM rental
WHERE DATE(rental_ts)BETWEEN '2020-05-01' AND '2020-05-31'
GROUP BY day)

SELECT SUM(CASE
  WHEN rent > 100 THEN 1
  ELSE 0
  END) AS good_days, 31 - SUM(CASE
  WHEN rent > 100 THEN 1
  ELSE 0
  END) AS bad_days
  FROM rent_day

_____________________________________________________________________________________________________________________________

Source : https://techtfq.com   (Olyimpics)       Difficulty : Medium                                num = 15


Question : 

Write a SQL query to return the Olympic Games which had the highest participating countries and the lowest participating countries.



Answer : 

WITH n AS (SELECT games, COUNT(DISTINCT region) AS c 
		  FROM history
		  JOIN regions ON history.noc = regions.noc
		  GROUP BY games)
SELECT DISTINCT CONCAT(first_value(games) OVER(ORDER BY c), '-', first_value(c) OVER(ORDER BY c)) AS lowest,
CONCAT(first_value(games) OVER(ORDER BY c DESC), '-', first_value(c) OVER(ORDER BY c DESC)) AS highest
FROM n

________________________________________________________________________________________________________________________________

Source : https://techtfq.com   (Olyimpics)       Difficulty : Medium                                num = 16


Question : 

SQL query to return the list of countries who have been part of every Olympics games.


Answer :


WITH t AS (SELECT region, COUNT(DISTINCT games) AS total FROM history
JOIN regions ON history.noc = regions.noc
GROUP BY region
ORDER BY total DESC)

SELECT region, total FROM t
WHERE total = (SELECT COUNT(DISTINCT games) FROM history)

________________________________________________________________________________________________________________________________

Source : https://techtfq.com   (Olyimpics)       Difficulty : Medium                                num = 17


Question : 

Identify the sport which was played in all summer olympics.
 
Answer :

SELECT DISTINCT sport, COUNT(DISTINCT games) FROM history
WHERE season = 'Summer'
GROUP BY sport
HAVING COUNT(DISTINCT games) = (SELECT COUNT(DISTINCT games) FROM history
							   WHERE season = 'Summer')
                              
________________________________________________________________________________________________________________________________

Source : https://techtfq.com   (Olyimpics)       Difficulty : Hard                                num = 18


Question :

Write a SQL query to get the ratio of male and female participants

Answer :

WITH sex_count AS (SELECT sex, COUNT(*) AS cnt FROM history
				  GROUP BY sex),
max_min AS (SELECT *, ROW_NUMBER() OVER(ORDER BY cnt DESC) AS r FROM sex_count),
x AS (SELECT cnt FROM max_min
	 WHERE r = 1),
n AS (SELECT cnt FROM max_min
	 WHERE r = 2)
SELECT CONCAT('1 : ', x.cnt::decimal/n.cnt) FROM x,n
	 
				 
________________________________________________________________________________________________________________________________               
Source : https://techtfq.com   (Olyimpics)       Difficulty : Medium                                num = 19


Question : 

SQL query to fetch the top 5 athletes who have won the most gold medals.


Answer :

WITH m AS (SELECT name, COUNT(*) AS gold_medals
		   FROM history
		  WHERE medal = 'Gold'
		  GROUP BY name),
ranked as (SELECT m.name, gold_medals, history.team,
		   DENSE_RANK() OVER(ORDER BY gold_medals DESC) AS r
		   FROM m
		  JOIN history ON m.name = history.name)
SELECT DISTINCT name, team, gold_medals FROM ranked
WHERE r <= 5
ORDER BY gold_medals DESC
________________________________________________________________________________________________________________________________  

Source : https://techtfq.com   (Olyimpics)       Difficulty : Medium                                num = 20

Question :

Write a SQL query to fetch the top 5 most successful countries in olympics. (Success is defined by no of medals won).


Answer : 

WITH m AS (SELECT team, COUNT(*) medals FROM history
		  WHERE medal IN ('Gold', 'Silver', 'Bronze')
		  GROUP BY team),
r AS (SELECT team, medals,
	  DENSE_RANK() OVER(ORDER BY medals DESC) rank
	  FROM m)
SELECT team, medals, rank from r
WHERE rank <= 5
ORDER BY medals DESC

________________________________________________________________________________________________________________________________ 

Source : https://techtfq.com   (Olyimpics)       Difficulty : Medium                                num = 21

Question :

Write a SQL query to list down the  total gold, silver and bronze medals won by each country.


Answer :

WITH m AS (SELECT region, CASE
						WHEN medal = 'Gold' THEN 1
						ELSE 0
						END Gold,
			 CASE
						WHEN medal = 'Silver' THEN 1
						ELSE 0
						END  Silver,
			 CASE
						WHEN medal = 'Bronze' THEN 1
						ELSE 0
						END  Bronze
FROM history
JOIN regions ON history.noc = regions.noc		  )
SELECT region, SUM(Gold) Gold, SUM(Bronze) Bronze, SUM(Silver) Silver
FROM m
GROUP BY region
ORDER BY Gold DESC

________________________________________________________________________________________________________________________________ 